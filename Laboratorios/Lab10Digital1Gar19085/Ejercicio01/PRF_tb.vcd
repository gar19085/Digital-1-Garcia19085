$date
	Fri Nov 06 22:52:01 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 4 ! Q2 [3:0] $end
$var wire 4 " Q1 [3:0] $end
$var reg 1 # CLK $end
$var reg 1 $ ENABLE1 $end
$var reg 1 % ENABLE2 $end
$var reg 12 & IN [11:0] $end
$var reg 1 ' LOAD $end
$var reg 1 ( RST $end
$scope module T1 $end
$var wire 1 # CLK $end
$var wire 1 $ ENABLE1 $end
$var wire 1 % ENABLE2 $end
$var wire 12 ) IN [11:0] $end
$var wire 1 ' LOAD $end
$var wire 1 ( RST $end
$var wire 4 * Q2 [3:0] $end
$var wire 4 + Q1 [3:0] $end
$var wire 8 , DIN [7:0] $end
$var wire 12 - COUNTADD [11:0] $end
$scope module PZII $end
$var wire 8 . Dout [7:0] $end
$var wire 12 / address [11:0] $end
$upscope $end
$scope module PzI $end
$var wire 1 ( CLK $end
$var wire 12 0 E [11:0] $end
$var wire 1 $ ENABLE $end
$var wire 1 ' LOAD $end
$var wire 1 # RST $end
$var reg 12 1 COUNT [11:0] $end
$upscope $end
$scope module PzIII $end
$var wire 1 # CLK $end
$var wire 8 2 D [7:0] $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var wire 4 3 Q2 [3:0] $end
$var wire 4 4 Q1 [3:0] $end
$scope module Ju87 $end
$var wire 1 # CLK $end
$var wire 4 5 D [3:0] $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var wire 4 6 Q [3:0] $end
$scope module F4F1 $end
$var wire 1 # CLK $end
$var wire 1 7 D $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var reg 1 8 Q $end
$upscope $end
$scope module F4F2 $end
$var wire 1 # CLK $end
$var wire 1 9 D $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var reg 1 : Q $end
$upscope $end
$scope module F4F3 $end
$var wire 1 # CLK $end
$var wire 1 ; D $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var reg 1 < Q $end
$upscope $end
$scope module F4F4 $end
$var wire 1 # CLK $end
$var wire 1 = D $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var reg 1 > Q $end
$upscope $end
$upscope $end
$scope module Ju88 $end
$var wire 1 # CLK $end
$var wire 4 ? D [3:0] $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var wire 4 @ Q [3:0] $end
$scope module F4F1 $end
$var wire 1 # CLK $end
$var wire 1 A D $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var reg 1 B Q $end
$upscope $end
$scope module F4F2 $end
$var wire 1 # CLK $end
$var wire 1 C D $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var reg 1 D Q $end
$upscope $end
$scope module F4F3 $end
$var wire 1 # CLK $end
$var wire 1 E D $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var reg 1 F Q $end
$upscope $end
$scope module F4F4 $end
$var wire 1 # CLK $end
$var wire 1 G D $end
$var wire 1 % ENABLE $end
$var wire 1 ( RST $end
$var reg 1 H Q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xH
xG
xF
xE
xD
xC
xB
xA
bx @
bx ?
x>
x=
x<
x;
x:
x9
x8
x7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
b0 0
bx /
bx .
bx -
bx ,
bx +
bx *
b0 )
0(
0'
b0 &
0%
0$
0#
bx "
bx !
$end
#1
17
09
1;
0=
1A
0C
1E
1G
b1010 5
b1011 ?
b10101011 ,
b10101011 .
b10101011 2
b0 -
b0 /
b0 1
08
0:
0<
b0 "
b0 +
b0 4
b0 6
0>
0B
0D
0F
b0 !
b0 *
b0 3
b0 @
0H
1#
1(
#2
0#
0(
#3
07
0;
0G
b0 5
b1010 ?
b1010 ,
b1010 .
b1010 2
b1 -
b1 /
b1 1
1#
1$
#4
0#
1%
#5
1G
b1011 ?
1F
b1010 !
b1010 *
b1010 3
b1010 @
1B
b1011 ,
b1011 .
b1011 2
b10 -
b10 /
b10 1
b1 &
b1 )
b1 0
1#
#6
0#
#7
1C
0E
0G
b1100 ?
b1100 ,
b1100 .
b1100 2
b11 -
b11 /
b11 1
b1011 !
b1011 *
b1011 3
b1011 @
1H
1#
#8
0#
#9
1G
b1101 ?
0H
0F
b1100 !
b1100 *
b1100 3
b1100 @
1D
b1101 ,
b1101 .
b1101 2
b100 -
b100 /
b100 1
1#
#10
0#
#11
0A
0C
b1 ?
b1 ,
b1 .
b1 2
b101 -
b101 /
b101 1
b1101 !
b1101 *
b1101 3
b1101 @
1H
1#
#12
0#
#13
1;
b10 5
0D
b1 !
b1 *
b1 3
b1 @
0B
b100001 ,
b100001 .
b100001 2
b110 -
b110 /
b110 1
1#
#14
0#
#15
19
0;
1C
1E
0G
b100 5
b110 ?
b1000110 ,
b1000110 .
b1000110 2
b111 -
b111 /
b111 1
b10 "
b10 +
b10 4
b10 6
1<
1#
b1010 &
b1010 )
b1010 0
#16
0#
#17
17
09
1=
1A
0C
b1001 5
b1010 ?
0H
1F
b110 !
b110 *
b110 3
b110 @
1D
0<
b100 "
b100 +
b100 4
b100 6
1:
b10011010 ,
b10011010 .
b10011010 2
b1000 -
b1000 /
b1000 1
1#
#18
0#
#19
1G
b1011 ?
b10011011 ,
b10011011 .
b10011011 2
b1001 -
b1001 /
b1001 1
18
0:
b1001 "
b1001 +
b1001 4
b1001 6
1>
1B
b1010 !
b1010 *
b1010 3
b1010 @
0D
1#
#20
0#
#21
07
19
1C
0E
0G
b101 5
b1100 ?
b1011 !
b1011 *
b1011 3
b1011 @
1H
b1011100 ,
b1011100 .
b1011100 2
b1010 -
b1010 /
b1010 1
1#
#22
0#
#23
09
0=
0C
b0 5
b1000 ?
b1000 ,
b1000 .
b1000 2
b1011 -
b1011 /
b1011 1
08
b101 "
b101 +
b101 4
b101 6
1:
1D
0F
b1100 !
b1100 *
b1100 3
b1100 @
0H
1#
#24
0#
#25
0A
1C
1G
b101 ?
b1000 !
b1000 *
b1000 3
b1000 @
0D
0>
b0 "
b0 +
b0 4
b0 6
0:
b101 ,
b101 .
b101 2
b1100 -
b1100 /
b1100 1
1#
#26
0#
#27
1;
1=
1E
0G
b11 5
b110 ?
b110110 ,
b110110 .
b110110 2
b1101 -
b1101 /
b1101 1
0B
1D
b101 !
b101 *
b101 3
b101 @
1H
1#
#28
0#
#29
19
0=
0C
0E
1G
b110 5
b1 ?
0H
b110 !
b110 *
b110 3
b110 @
1F
1>
b11 "
b11 +
b11 4
b11 6
1<
b1100001 ,
b1100001 .
b1100001 2
b1110 -
b1110 /
b1110 1
1#
#30
0#
1'
#31
0;
1=
1A
1C
0G
b101 5
b1100 ?
b1011100 ,
b1011100 .
b1011100 2
b1010 -
b1010 /
b1010 1
1#
0%
0$
#32
0#
#33
1#
#34
0#
#35
1#
#36
0#
#37
0F
b1100 !
b1100 *
b1100 3
b1100 @
1B
0<
b101 "
b101 +
b101 4
b101 6
1:
1#
1%
1$
#38
0#
#39
1#
#40
0#
